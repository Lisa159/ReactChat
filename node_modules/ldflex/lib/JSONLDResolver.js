"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _jsonld = require("jsonld");

var _dataModel = require("@rdfjs/data-model");

var _promiseUtils = require("./promiseUtils");

/**
 * Resolves property names of a path
 * to their corresponding IRIs through a JSON-LD context.
 */
class JSONLDResolver {
  constructor(context) {
    this._context = context;
  }
  /**
   * The JSON-LD resolver supports all string properties.
   */


  supports(property) {
    return typeof property === 'string';
  }
  /**
   * Resolves the property by extending the query path with it.
   */


  resolve(property, pathData) {
    const predicate = {
      then: (0, _promiseUtils.getThen)(() => this.expandProperty(property))
    };
    return pathData.extendPath({
      property,
      predicate
    });
  }
  /**
   * Expands a JSON property key into a full IRI.
   */


  async expandProperty(property) {
    // JavaScript requires keys containing colons to be quoted,
    // so prefixed names would need to written as path['foaf:knows'].
    // We thus allow writing path.foaf_knows or path.foaf$knows instead.
    property = property.replace(/[_$]/, ':'); // Create a JSON-LD document with the given property

    const document = {
      '@context': this._context,
      [property]: ''
    }; // Expand the document to obtain the full IRI

    const expanded = await (0, _jsonld.expand)(document);
    if (expanded.length === 0) throw new Error(`The JSON-LD context cannot expand the '${property}' property`);

    _assert.default.equal(expanded.length, 1);

    const propertyIRIs = Object.keys(expanded[0]);

    _assert.default.equal(propertyIRIs.length, 1);

    return (0, _dataModel.namedNode)(propertyIRIs[0]);
  }

}

exports.default = JSONLDResolver;